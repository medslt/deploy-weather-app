{"version":3,"sources":["Header/TimeBlock.module.css","Header/Header.module.css","ProgressBar/ProgressBar.module.css","Day/Day.module.css","Main/Main.module.css","DayTemperature/DayTemperature.module.css","storeManegement/storeContext.js","Header/TimeBlock.js","ProgressBar/index.js","DayTemperature/index.js","Header/index.js","Day/index.js","Main/index.js","storeManegement/StoreProvider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","storeContext","createContext","TimeBlock","className","styles","timeBlock","oval3","oval2","oval1","time","dayjs","format","ProgressBar","width","progress","progressMoved","join","progressBar","style","memo","temperature","spanRef","useRef","useEffect","current","fontSize","setTimeout","ref","textAnimation","useContext","todayWeatherTemp","secondsToReload","progressBarWidth","parseInt","header","headerInfo","textXlarge","temp","progressInfo","progressText","dayInfo","day","icon","desc","dayBlock","dayIcon","src","Main","fiveDaysWeatherInfo","main","days","map","i","key","Provider","getUrl","path","StoreProvider","children","useState","setTodayWeatherTemp","setFiveDaysWeatherInfo","setSecondsToReload","Promise","all","fetchTodayWeather","fetchFiveDaysWeatherInfo","then","values","reloadWeatherData","a","url","fetch","response","json","data","newTodayWeatherTemp","console","error","daysInfo","tempDay","list","forEach","tempInfo","dt_txt","weather","description","replace","push","slice","secCounter","setInterval","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.eee7631e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeBlock\":\"TimeBlock_timeBlock__1ZLQ7\",\"time\":\"TimeBlock_time__lNEWF\",\"oval1\":\"TimeBlock_oval1__3OOkz\",\"oval2\":\"TimeBlock_oval2__1Vb1D\",\"oval3\":\"TimeBlock_oval3__3spq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1m9KH\",\"headerInfo\":\"Header_headerInfo__2UEmX\",\"temp\":\"Header_temp__12w1p\",\"progressText\":\"Header_progressText__2_zgH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"ProgressBar_progress__1mtO7\",\"progressBar\":\"ProgressBar_progressBar__XZbqh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dayBlock\":\"Day_dayBlock__QEVra\",\"dayInfo\":\"Day_dayInfo__vQ9wl\",\"dayIcon\":\"Day_dayIcon__206ok\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2m6w7\",\"days\":\"Main_days__17346\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textAnimation\":\"DayTemperature_textAnimation__g3m3x\"};","import {createContext} from 'react';\n\nconst storeContext = createContext();\n\nexport default storeContext;","import React from 'react';\nimport dayjs from 'dayjs';\nimport styles from './TimeBlock.module.css';\n\n\nconst TimeBlock = () => {\n    return (\n        <div className={styles.timeBlock}>\n            <span className={styles.oval3}/>\n            <span className={styles.oval2}/>\n            <span className={styles.oval1}/>  \n            <span className={styles.time}>{dayjs().format('HH:mm')} GMT</span>\n            <span className={styles.oval3}/>\n            <span className={styles.oval2}/>\n            <span className={styles.oval1}/>  \n        </div>\n    )\n}\n\n\nexport default TimeBlock;\n","import React from 'react';\n\nimport styles from './ProgressBar.module.css';\n\nconst ProgressBar = ({width}) => {\n \n    return (\n        <div>    \n            <div className= {[styles.progress, styles.progressMoved].join(' ')}>\n                <div className={styles.progressBar} style={{width}}>\n                </div>                       \n            </div> \n        </div>\n    )\n}\n\n\nexport default ProgressBar;","import React, {useEffect, useRef, memo} from 'react';\n\nimport styles from './DayTemperature.module.css';\n\nconst DayTemperature = ({temperature}) => {\n    const spanRef = useRef(null);\n\n    useEffect(() => {\n        if (spanRef.current) {\n            spanRef.current.style.fontSize = 'small'\n            setTimeout(() => {\n                spanRef.current.style.fontSize = 'inherit'\n            }, 300);\n        }\n    }, [temperature])\n\n    return (\n        <span ref={spanRef} className={styles.textAnimation}>\n             { temperature && `${temperature}Â°`}\n        </span>\n    )\n}\n\n\nexport default memo(DayTemperature);","import React, {useContext, memo} from 'react';\nimport storeContext from '../storeManegement/storeContext';\nimport TimeBlock from './TimeBlock';\nimport ProgressBar from '../ProgressBar';\nimport DayTemperature from '../DayTemperature';\nimport styles from './Header.module.css';\n\n\nconst Header = () => {\n    const {todayWeatherTemp, secondsToReload} = useContext(storeContext);\n    const progressBarWidth = `${parseInt((60 - secondsToReload) * 10 / 6)}%` ;\n        \n    return (\n        <div className={styles.header}>\n            <div className={styles.headerInfo}>\n                <div className={styles.textXlarge}>\n                    LONDON\n                </div>\n                <TimeBlock/>\n                <div className={styles.temp}> \n                    <DayTemperature temperature={todayWeatherTemp}/>\n                </div>\n            </div>\n            <div className={styles.progressInfo}>\n                <div className={styles.progressText} >\n                    Reloading in {secondsToReload}s\n                </div>\n                <ProgressBar width={progressBarWidth}/>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport default memo(Header);\n","import React, {memo} from 'react';\nimport DayTemperature from '../DayTemperature';\nimport styles from './Day.module.css';\n\nconst Day = ({dayInfo}) => {\n    const {day, icon, desc, temp} = dayInfo;\n    return (\n        <div className={styles.dayBlock}>\n            <div className={styles.dayInfo}>\n                <span>{day}</span> <DayTemperature temperature={temp}/>\n            </div>\n\n            <div className={styles.dayIcon}>\n               <span>\n                    <img src={`http://openweathermap.org/img/wn/${icon}.png`} width=\"50\" />\n                </span> \n                <span>{desc}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default memo(Day);","import React, {useContext} from 'react';\nimport Header from '../Header';\nimport Day from '../Day';\nimport storeContext from '../storeManegement/storeContext'; \nimport styles from './Main.module.css';\n\nconst Main = () => {\n    const {fiveDaysWeatherInfo} = useContext(storeContext);\n    return (\n        <div className={styles.main}>\n            <Header/>\n            <div className={styles.days}>\n                {fiveDaysWeatherInfo.map((dayInfo, i) => (<Day dayInfo={dayInfo} key={i}/>))}\n            </div>\n\n        </div>\n      );\n}\n\nexport default Main;","import React, {useState, useEffect} from 'react';\nimport dayjs from 'dayjs';\nimport storeContext from './storeContext';\n\n\n\nconst {Provider} = storeContext;\nconst getUrl = (path) => {\n    const params = '?q=London,uk&units=metric&appid=2cefe1fd9c145b11b8254ac699e6da04';\n    const baseUrl = 'http://api.openweathermap.org/data/2.5/';\n\n    const url = `${baseUrl}${path}${params}`\n\n    return url;\n};\n\nconst StoreProvider = ({children}) => {\n    const [todayWeatherTemp, setTodayWeatherTemp] = useState();\n    const [fiveDaysWeatherInfo, setFiveDaysWeatherInfo] = useState([]);\n    const [secondsToReload, setSecondsToReload] = useState(60);\n\n    useEffect(() => {\n        Promise.all([fetchTodayWeather(), fetchFiveDaysWeatherInfo()]).then((values) => {\n            reloadWeatherData();\n          });\n    }, []);\n\n    const fetchTodayWeather = async () => {\n        try {\n            const url =  getUrl('weather');\n            const response = await fetch(url);\n            const data = await response.json();\n           \n            const newTodayWeatherTemp = parseInt(data.main.temp);\n            setTodayWeatherTemp(newTodayWeatherTemp);\n        } catch (error) {\n            console.error({error});\n        }\n    }\n\n    const fetchFiveDaysWeatherInfo = async() => {\n        try {\n            const url =  getUrl('forecast');\n            const response = await fetch(url);\n            const data = await response.json();\n           \n            const daysInfo = [];\n            let tempDay = -1;\n            \n            data.list.forEach((tempInfo) => {\n               if (tempDay !== dayjs(tempInfo.dt_txt).day()) {\n                   \n                 tempDay = dayjs(tempInfo.dt_txt).day();\n\n                 const dayInfo = {\n                    day: dayjs(tempInfo.dt_txt).format('ddd'),\n                    temp: parseInt(tempInfo.main.temp),\n                    desc: tempInfo.weather[0].description,\n                    icon: tempInfo.weather[0].icon.replace('n', 'd'), // get icon days instead of night\n                 }\n\n                 daysInfo.push(dayInfo);\n               }\n            })\n            \n            setFiveDaysWeatherInfo(daysInfo.slice(1,6)); // remove today\n        } catch (error) {\n            console.error({error});\n        }\n    }\n\n    const reloadWeatherData = () => {\n        let secCounter = 0;\n        setInterval(() => {\n            secCounter++;\n            setSecondsToReload(60 - secCounter);\n            if (secCounter === 60) {\n                fetchTodayWeather();\n                fetchFiveDaysWeatherInfo();\n                secCounter = 0;\n            }\n            \n        }, 1000);\n    }\n\n    return (\n        <Provider value={{todayWeatherTemp, fiveDaysWeatherInfo, secondsToReload}}>\n            {children}\n        </Provider>\n    )\n};\n\n\nexport default StoreProvider;\n\n","import React from 'react';\nimport Main from './Main';\nimport StoreProvider from './storeManegement/StoreProvider';\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <Main/>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}